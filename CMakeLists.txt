cmake_minimum_required(VERSION 3.10)

# Project name and version
project(RunMMEasDate VERSION 1.0 LANGUAGES CXX)

set(EXE_NAME "MobiclipMulticoreEncoderForwarder")
set(PRODUCT_NAME "Mobiclip Multicore Encoder Forwarder")

# Disable just_my_code_debugging
set(CMAKE_VS_JUST_MY_CODE_DEBUGGING 0)

# Set C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2")

# Define the source files for the DLL
set(DLL_SOURCES
	DateInject.cpp
)

# Path to MinHook library (using relative path)
set(MINHOOK_DIR "${CMAKE_SOURCE_DIR}/minhook")
set(MINHOOK_INCLUDE_DIR "${MINHOOK_DIR}/include")
# Add MinHook as a subdirectory to build it as part of the project
add_subdirectory(${MINHOOK_DIR} minhook_build)

# MinHook library will be available as 'minhook' target after add_subdirectory
set(MINHOOK_LIB minhook)

# Create the DLL (shared library)
add_library(DateInject SHARED ${DLL_SOURCES})

# find build type for later https://stackoverflow.com/a/72330784
target_compile_definitions(DateInject PRIVATE "DEBUG=$<IF:$<CONFIG:Debug>,1,0>")
if (DEBUG)
	set(BUILD_TYPE "Debug")
else()
	set(BUILD_TYPE "Release")
endif()

# Set output name for the DLL
set_target_properties(DateInject PROPERTIES
	OUTPUT_NAME "DateInject"
	PREFIX ""
	SUFFIX ".dll"
)

get_target_property(DLL_NAME DateInject OUTPUT_NAME)
get_target_property(DLL_SUFFIX DateInject SUFFIX)
set(DLL_NAME "${DLL_NAME}${DLL_SUFFIX}")

# Include directories for the DLL
target_include_directories(DateInject PRIVATE ${MINHOOK_INCLUDE_DIR})

# Link the DLL to MinHook library
target_link_libraries(DateInject PRIVATE ${MINHOOK_LIB})

# Define the source files for the executable
set(EXE_SOURCES
	main.cpp
)

# https://github.com/gammasoft71/Examples_wxWidgets/tree/master/wxCore/Applications/ApplicationIcon
# Resources
set(EXE_SOURCES ${EXE_SOURCES} ${CMAKE_CURRENT_BINARY_DIR}/resources/${PROJECT_NAME}.rc)
set(RESOURCES Resources/icon.ico)
get_filename_component(ABSOLUTE_PATH_FILE_DLL "${CMAKE_BINARY_DIR}/${BUILD_TYPE}/${DateInject}" REALPATH BASE_DIR "${CMAKE_BINARY_DIR}")
string(REPLACE "/" "\\\\" ABSOLUTE_PATH_FILE_DLL ${ABSOLUTE_PATH_FILE_DLL})
get_filename_component(ABSOLUTE_PATH_FILE_ICON "${CMAKE_CURRENT_SOURCE_DIR}/Resources/icon.ico" REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
string(REPLACE "/" "\\\\" ABSOLUTE_PATH_FILE_ICON ${ABSOLUTE_PATH_FILE_ICON})
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/resources/${PROJECT_NAME}.rc
	"#pragma region CMake generated code\n"
	"// This code was generated by CMake script.\n"
	"//\n"
	"// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\n"
	"\n"
	"#include <Windows.h>\n"
	"\n"
	"LANGUAGE LANG_NEUTRAL, SUBLANG_NEUTRAL\n"
	"#pragma code_page(65001)\n"
	"\n"
	"DATEINJECTDLL RCDATA \"${ABSOLUTE_PATH_FILE_DLL}\\${DLL_NAME}\"\n"
	"IDI_APPLICATION ICON DISCARDABLE \"${ABSOLUTE_PATH_FILE_ICON}\"\n\n"
	"VS_VERSION_INFO VERSIONINFO\n"
	" FILEVERSION 1,0,0,0\n"
	" PRODUCTVERSION 1,0,0,0\n"
	" FILEFLAGSMASK 0x0L\n"
	"#if !defined(NDEBUG)\n"
	" FILEFLAGS VS_FF_DEBUG\n"
	"#endif\n"
	" FILEOS VOS_NT\n"
	" FILETYPE VFT_APP\n"
	" FILESUBTYPE VFT2_UNKNOWN\n"
	"BEGIN\n"
	"  BLOCK \"StringFileInfo\"\n"
	"  BEGIN\n"
	"    BLOCK \"000004b0\"\n"
	"    BEGIN\n"
	"      VALUE \"CompanyName\", \"FoofooTheGuy\"\n"
	"      VALUE \"FileDescription\", \"${PRODUCT_NAME}\"\n"
	"      VALUE \"FileVersion\", \"1,0,0,0\"\n"
	"      VALUE \"InternalName\", \"${PROJECT_NAME}\"\n"
	"      VALUE \"LegalCopyright\", \"\"\n"
	"      VALUE \"LegalTrademarks1\", \"\"\n"
	"      VALUE \"LegalTrademarks2\", \"\"\n"
	"      VALUE \"OriginalFilename\", \"${EXE_NAME}.exe\"\n"
	"      VALUE \"ProductName\", \"${PRODUCT_NAME}\"\n"
	"      VALUE \"ProductVersion\", \"1,0,0,0\"\n"
	"    END\n"
	"  END\n"
	"  BLOCK \"VarFileInfo\"\n"
	"  BEGIN\n"
	"    VALUE \"Translation\", 0x0, 1200\n"
	"  END\n"
	"END\n"
	"#pragma endregion\n"
)

# Create the executable
add_executable(RunMMEasDate ${EXE_SOURCES})
set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${EXE_NAME})

# Disable console window https://stackoverflow.com/a/58079971
target_link_options(RunMMEasDate PRIVATE "/SUBSYSTEM:WINDOWS" "/ENTRY:mainCRTStartup")

# Link the executable to required libraries if needed
# Currently, the main.cpp does not directly depend on MinHook, so no linking is necessary here
# If additional dependencies are needed, they can be added with target_link_libraries

# Set output directories for binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Ensure the DLL is built before the executable
add_dependencies(RunMMEasDate DateInject)
